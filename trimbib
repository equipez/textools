#!/bin/bash
# Usage: trimbib [-l|--latex] [-t|--tex] [NAME_OF_BIBTEX_FILE] [-o|--output NAME_OF_OUTPUT_FILE]
# This script trims bib files using biber in the following way.
# 1. Only one of the duplicated entries is kept. (But which one? I am not sure what is biber's rule.)
# 2. Items are ordered by author, year, and the entry key.
# 3. Macros are sorted alphabetically.
# 4. The file is indented.
#
# If -l|--latex is present, then a BibLaTeX file will be produced;
# If -t|--tex is present, then a BibTeX file will be produced;
# if neither -l|--latex nor -t|--tex is present, then trimbib will try to decide the type of the
# input file and generate a file of the same type; if the type cannot the decided, then a BibTeX
# file will be generated.

USER_SPECIFY_LATEX=0
USER_SPECIFY_TEX=0
BIBFILE=""
OUTPUTFILE=""
TIME=$(date +%Y.%m.%d-%H.%M.%S)

# Log files
TRIMBIBLOG="trimbib.log"
CHECKBIBLOG="checkbib.log"

# Directory to contain the backups.
BAKDIR=./backup/


if [[ $# -gt 4 ]]; then
    printf "Usage: trimbib [-l|--latex] [-t|--tex] [BIBFILE_NAME] [-o|--output NAME_OF_OUTPUT_FILE]\n"
    exit -1
fi

# Parse the arguments
while [[ -n "$1" ]]; do
	case "$1" in
	-l|--latex)
        USER_SPECIFY_LATEX=1
		;;
    -t|--tex)
        USER_SPECIFY_TEX=1
        ;;
    -o|--output)
        if [[ $# -gt 1 ]]; then
            OUTPUTFILE="$2"
            shift
        fi
        ;;
	*)
        if [[ -z "$BIBFILE" ]]; then
            BIBFILE="$1"
        fi
        ;;
	esac
	shift
done

# Get the name of the bib file with full path.
# If $BIBFILE is a symlink, we work on its target.
# If the input is empty, then use the latest bib file under the current directory.
if [[ -z "$BIBFILE" ]]; then
	BIBFILE=`find ./ -maxdepth 1 -type f -name "*.bib" -print0 | xargs -r -0 ls -1 -t | head -1`
fi
BIBFILE=`readlink -f $BIBFILE`
if [[ -z "${BIBFILE##*/}" ]]; then
    echo ""
	echo "No bib file found."
    echo ""
	exit -2
elif [[ ! -f "$BIBFILE" ]]; then
    echo ""
    echo "$BIBFILE does not exist."
    echo ""
	exit -2
fi

if grep -q "journaltitle\s*=\s*\|date\s*=\s*\|location\s*=\s*\|type\s*=\s*" $BIBFILE ; then
    USER_INPUT_LATEX=1
else
    USER_INPUT_LATEX=0
fi

if [[ $USER_SPECIFY_LATEX -eq 1 && $USER_SPECIFY_TEX -eq 1 ]] ; then
    echo ""
    echo "-l|--latex and -t|--t cannot be present simultaneously."
    echo ""
    exit -1
elif [[ $USER_SPECIFY_LATEX -eq 1 ]] ; then
    BIBLATEX=1
elif [[ $USER_SPECIFY_LATEX -ne 1 ]] ; then
    BIBLATEX=0
elif [[ $USER_INPUT_LATEX -eq 1 ]] ; then
    BIBLATEX=1
else
    BIBLATEX=0
fi

# If no output file is specified, set OUTPUTFILE to $BIBFILE.
if [[ -z "$OUTPUTFILE" ]]; then
    OUTPUTFILE=$BIBFILE
fi
# Get the full path of $OUTPUTFILE. Note that we do not resolve the link if $OUTPUTFILE exists
# and is a symlink.
OUTPUTFILE="$(cd "$(dirname "$OUTPUTFILE")" && pwd)/$(basename "$OUTPUTFILE")"

# Check the bib file before trimming.
if [[ $USER_INPUT_LATEX -eq 1 ]] ; then
    checkbib -l $BIBFILE
else
    checkbib $BIBFILE
fi

read -n1 -s -r -p \
    $'Continue to trim the bib file? [Y/n] \nRevise it before trimming if it contains major mistakes.\n' KEY

if ! [[ "$KEY" == 'Y' || "$KEY" == 'y' || "$KEY" == "" ]]; then
    exit 1
fi

echo "**************** checkbib.log before trimming ****************" | cat - $CHECKBIBLOG > "tmp-$TIME" && mv "tmp-$TIME" $CHECKBIBLOG
mv $CHECKBIBLOG $CHECKBIBLOG.bak

# Temporary files.
INPUTBIB="inputbib-$TIME.bib"
OUTPUTBIB="outputbib-$TIME.bib"
TMPBIB="tmpbib-$TIME.bib"
BIBMACROS="bibmacros-$TIME"
BIBEROUT="biberout-$TIME"
BIBENTRIES="bibentries-$TIME"

cp $BIBFILE $INPUTBIB

# Pre-process the bib file if the output is a BibTeX file. This is necessary if the input is BibLaTeX.
LINEBREAKER="LINEBREAKERSTARTING$(date +%s)LINEBREAKERENDING"
if [[ $BIBLATEX -eq 0 ]] ; then
    sed '/^\s*%/d' $INPUTBIB | sed 's/%.*$//' | awk -v ORS="$LINEBREAKER" 1 \
        | sed "s/$LINEBREAKER\s*@/\n@/g" | sed "s/$LINEBREAKER//g" > $TMPBIB
    grep -v "techreport\|phdthesis\|masterthesis" $TMPBIB > $OUTPUTBIB
    grep techreport $TMPBIB | sed 's/^\s*@report/@techreport/' | sed 's/type\s*=\s*{.*}\s*,//' >> $OUTPUTBIB
    grep phdthesis $TMPBIB | sed 's/^\s*@thesis/@phdthesis/' | sed 's/type\s*=\s*{.*}\s*,//' \
        | sed 's/institution/school/' >> $OUTPUTBIB
    grep masterthesis $TMPBIB | sed 's/^\s*@thesis/@masterthesis/' | sed 's/type\s*=\s*{.*}\s*,//' \
        | sed 's/institution/school/' >> $OUTPUTBIB
    rm -f $TMPBIB
    sed -i 's/,\s*journaltitle\s*=\s*/,journal=/' $OUTPUTBIB
    sed -i 's/,\s*date\s*=\s*/,year=/' $OUTPUTBIB
    sed -i 's/,\s*location\s*=\s*/,address=/' $OUTPUTBIB
    mv $OUTPUTBIB $INPUTBIB
fi

# Print the macros in $INPUTBIB to $BIBMACROS
echo ""
echo "Sorting the macros ..."
grep "^\s*@string{\|^\s*@String{\|^\s*@STRING{" $INPUTBIB |sed 's/.*@/@/' \
    | sed 's/@String/@string/' | sed 's/@STRING/@string/' \
    | sed 's/\.\s*"\s*}/\."}/' \
    | sed 's/\s*=\s*/\ =\ /' \
    > $BIBMACROS


# Trim the bib entries by biber
echo ""
echo "Invoking biber to trim the bib entries ..."
echo ""

# Configuration of biber.
################################################################################
cat > biber.conf <<EOF
<?xml version="1.0"?>
<config>
	<output_align>true</output_align>
	<output_fieldcase>lower</output_fieldcase>

	<!--!!!The following lines make biber to sort the bib entries according to year, author, and title.!!!-->
	<sortingtemplate name="tool">
		<sort order="1" sort_direction="ascending">
			<sortitem order="1">author</sortitem>
		</sort>
		<sort order="2" sort_direction="ascending">
			<sortitem order="1">year</sortitem>
		</sort>
		<sort order="3" sort_direction="ascending">
			<sortitem order="1">entrykey</sortitem>
		</sort>
	</sortingtemplate>

	<!--!!!By default, biber removes the "nonstandard fields".!!!-->
	<!--!!!The following lines ensure that the nonstandard fields are retained in certain entries.!!!-->
    <!--!!!See https://tex.stackexchange.com/questions/415028/prevent-biber-tool-from-removing-non-standard-fields-in-bib-files !!!-->
  	<datamodel>
		<fields>
            <!--!!!Put the name of the desired fields here.!!!-->
	  		<field fieldtype="field" datatype="literal">_number</field>
	  		<field fieldtype="field" datatype="literal">_publisher</field>
	  		<field fieldtype="field" datatype="literal">journal</field>
	  		<field fieldtype="field" datatype="literal">school</field>
	  		<field fieldtype="field" datatype="literal">address</field>
		</fields>
		<entryfields>
            <!--!!!For article, retain "_number", "_publisher", "journal".!!!-->
	  		<entrytype>article</entrytype>
	  		<field>_number</field>
	  		<field>_publisher</field>
	  		<field>journal</field>
		</entryfields>
		<entryfields>
            <!--!!!For masterthesis, retain "school", "address", "note".!!!-->
	  		<entrytype>masterthesis</entrytype>
	  		<field>school</field>
	  		<field>address</field>
	  		<field>note</field>
		</entryfields>
		<entryfields>
            <!--!!!For phdthesis, retain "school", "address", "note".!!!-->
	  		<entrytype>phdthesis</entrytype>
	  		<field>school</field>
	  		<field>address</field>
	  		<field>note</field>
		</entryfields>
		<entryfields>
            <!--!!!For techreport, retain "number", "institution", "address", "note".!!!-->
	  		<entrytype>techreport</entrytype>
	  		<field>number</field>
	  		<field>institution</field>
	  		<field>address</field>
	  		<field>note</field>
		</entryfields>
  	</datamodel>
EOF

if [[ $BIBLATEX -eq 1 ]] ; then
cat >> biber.conf <<EOF
</config>
EOF
else
cat >> biber.conf <<EOF
	<!--!!!By default, biber maps "masterthesis" to "thesis" with a "type = {masterthesis}".!!!-->
	<!--!!!It does similar things on "phdthesis".!!!-->
    <!--!!!In addition, it maps "techreport" to "report" with type={techreport}.!!!-->
	<!--!!!The following lines revokes this behavior.!!!-->
    <sourcemap>
        <maps datatype="bibtex">
            <map>
                <map_step map_type_source="mastersthesis" map_type_target="masterthesis" map_final="1"/>
            </map>
            <map>
                <map_step map_type_source="phdthesis" map_type_target="phdthesis" map_final="1"/>
            </map>
            <map>
                <map_step map_type_source="techreport" map_type_target="techreport" map_final="1"/>
            </map>
        </maps>
    </sourcemap>
</config>
EOF
fi
################################################################################

# Invoke biber.
# 1. "--output-safechars --output-safecharsset=full" tells biber to encode all non-ascii characters
#    into LaTeX macros. By default, this is disabled. Similar behavior can be invoked by
#    "--decodecharsset=null"; however, as of 2021-03-22, this approach seems buggy, because it will
#    cause biber to remove all the curly braces enclosing only one letter, e.g., {H}ilbert.
# 2. By default, biber uses "location" instead of "address", "journaltitle" instead of "journal",
#    and "date" instead of year (due to the difference between BibTeX and BibLaTeX). We use
#    "--output-field-replace" to disable such behavior.
if [[ $BIBLATEX -eq 1 ]] ; then
    biber --output-file $BIBEROUT \
        --tool --configfile=biber.conf \
        --output-safechars --output-safecharsset=full \
        --output_indent=4 $INPUTBIB
else
    biber --output-file $BIBEROUT \
        --tool --configfile=biber.conf \
        --output-safechars --output-safecharsset=full \
        --output_indent=4 \
        --output-field-replace=location:address,journaltitle:journal,date:year $INPUTBIB
fi

rm biber.conf
rm $INPUTBIB
rm $INPUTBIB.blg


# Print the trimmed bib entries into $BIBENTRIES.
touch $BIBEROUT  # $BIBEROUT is not generated if biber encounters errors.
gawk -v line=$(gawk '/@STRING|@String|@string/{n=NR}END{print n}' $BIBEROUT) 'NR>line' $BIBEROUT >  $BIBENTRIES

rm $BIBEROUT
if ! grep -q '[^[:space:]]' $BIBENTRIES ; then
    echo ""
    echo "$BIBFILE is not a bib file or contains no bib entry. Abort."
    echo ""
    rm $OUTPUTBIB $BIBMACROS $BIBENTRIES $CHECKBIBLOG.bak
    exit -3
fi


# Generate the new bib file.
printf "%% bib file generated at "$TIME".\n" > $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%% The recommended format of the bib entry label is:\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%     <AuthorLastnames_YearLetter>\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%  For example, the key for an article by Yuan may be:\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%     Yuan_2000a\n%%\n" >> $OUTPUTBIB
printf "%% It is advised to use the abbreviations of names of serials in Math. Rev.\n" >> $OUTPUTBIB
printf "%% See https://mathscinet.ams.org/msnhtml/serials.pdf .\n" >> $OUTPUTBIB
printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n" >> $OUTPUTBIB

grep -q -v '^\s*$' $BIBMACROS  > /dev/null  # Check whether $BIBMACROS is empty.
if [[ $? -eq 0 ]] ; then
    printf "%% String macros for abbreviations of names of serials.\n" >> $OUTPUTBIB
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_BEGIN%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" >> $OUTPUTBIB
    cat $BIBMACROS | sed -r '/^\s*$/d' | sort -u >> $OUTPUTBIB
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n" >> $OUTPUTBIB
fi
rm $BIBMACROS

cat $BIBENTRIES >> $OUTPUTBIB
rm $BIBENTRIES


# Make a backup of $OUTPUTFILE under $BAKDIR if it exists and the trimmed file is different from
# the original $OUTPUTFILE.
FULLBIBNAME=${OUTPUTFILE//\//%}
BAKBIBFILE=$FULLBIBNAME-$TIME
BIBDIFFERENT=0
if [[ -f "$OUTPUTFILE" ]]; then
    echo "****** Difference between the trimmed bib and the original $OUTPUTFILE ******" > $TRIMBIBLOG
    echo "" >> $TRIMBIBLOG
    # Remove the comments before comparing.
    diff <(grep -v "^\s*%" $OUTPUTBIB) <(grep -v "^\s*%" $OUTPUTFILE) >> $TRIMBIBLOG
    if [[ $? -eq 1 ]]; then
        BIBDIFFERENT=1
        # $BAKDIR/$FULLBIBNAME-lastes_backup is always the latest backup.
        mkdir -p $BAKDIR
        cp $OUTPUTFILE $BAKDIR/$FULLBIBNAME-latest_backup
    	mv $OUTPUTFILE $BAKDIR/$BAKBIBFILE
        # Keep at most 50 latest files under $BAKDIR.
        (cd $BAKDIR && ls -tp | grep -v '/$' | grep $FULLBIBNAME | tail -n +51 | xargs -I {} rm -- {})
    fi
fi

# Write the output to $OUTPUTFILE
mv $OUTPUTBIB $OUTPUTFILE


# Check the bib file after trimming.
if [[ $BIBLATEX -eq 1 ]] ; then
    checkbib -l $OUTPUTFILE
else
    checkbib $OUTPUTFILE
fi

echo "" >> $CHECKBIBLOG.bak
echo "***************** checkbib.log after trimming ****************" >> $CHECKBIBLOG.bak
cat $CHECKBIBLOG >> $CHECKBIBLOG.bak
echo "" >> $CHECKBIBLOG.bak
mv $CHECKBIBLOG.bak $CHECKBIBLOG

cat $CHECKBIBLOG  | cat - $TRIMBIBLOG > "tmp-$TIME" && mv "tmp-$TIME" $TRIMBIBLOG
rm $CHECKBIBLOG

echo "Done. See $TRIMBIBLOG for $CHECKBIBLOG and the difference due to the trimming."

if [[ $BIBDIFFERENT -eq 1 ]]; then
    echo ""
    echo "A copy of the original bib file is saved at"
    echo "$BAKDIR/$BAKBIBFILE"

    echo "" >> $TRIMBIBLOG
    echo "A copy of the original bib file is saved at" >> $TRIMBIBLOG
    echo "$BAKDIR/$BAKBIBFILE" >> $TRIMBIBLOG
fi

echo ""

exit 0
