#!/bin/bash

# Usage: checkbib [-l|--latex] [BIBFILE_NAME]
# checkbib does some basic checks on a bib file. It calls ./python/bibtex_check.py and biber.
# If -l|--latex is present, then checkbib checks the file as a BibLaTeX file; otherwise, it checks
# the file as a BibTeX file.

BIBLATEX=0
BIBFILE=""

# Log files
LOG="$(basename -- "$0").log"
BCPYLOG="bcpy.log"
BIBERLOG="biber.log"

# Check whether biber is available with a high enough version.
BIBER_MINVER=2.14
if ! command -v biber &> /dev/null ; then
    printf "\nbiber version >= %s is needed, but biber is not found.\n\n"  "$BIBER_MINVER"
    exit 3
fi
BIBER_VER="$(biber --version | grep -Eo '[0-9]\.[0-9]+' | head -1)"
if (( $(echo "$BIBER_MINVER > $BIBER_VER" | bc -l) )); then
    printf "\nbiber version >= %s is needed, but the current version is %s.\n\n"  "$BIBER_MINVER" "$BIBER_VER"
    exit 3
fi

if [[ $# -gt 2 ]]; then
    printf "Usage: checkbib [-l|--latex] [BIBFILE_NAME] \n"
    exit 1
fi

# Parse the arguments
while [[ -n "$1" ]]; do
    case "$1" in
        -l|--latex)
            BIBLATEX=1
            ;;
        *)
            if [[ -z "$BIBFILE" ]]; then
                BIBFILE="$1"
            fi
            ;;
    esac
    shift
done

# Get the name of the bib file with full path.
# If the input is empty, then use the latest bib file under the current directory.
if [[ -z "$BIBFILE" ]]; then
    BIBFILE=$(find ./ -maxdepth 1 -type f -name "*.bib" -print0 | xargs -r -0 ls -1 -t | head -1)
fi
BIBFILE=$(readlink -f "$BIBFILE")
if [[ -z "${BIBFILE##*/}" ]]; then
    printf "\nNo bib file found.\n"
    exit 2
elif [[ ! -f "$BIBFILE" ]]; then
    printf "\n%s does not exist.\n" "$BIBFILE"
    exit 2
fi

# Get the directory where this script resides
TEXTOOLSDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

BCPYOUTPUT="bibtex_check.html"
if [[ $BIBLATEX -eq 1 ]] ; then
    BCPY="python3 $TEXTOOLSDIR/python/bibtex_check.py -o $BCPYOUTPUT -l -b"
else
    BCPY="python3 $TEXTOOLSDIR/python/bibtex_check.py -o $BCPYOUTPUT -b"
fi


if [[ $BIBLATEX -eq 1 ]] ; then
    printf "\nChecking %s in BibLaTeX mode ...\n" "$BIBFILE"
    printf "Result of checking %s in BibLaTeX mode\n" "$BIBFILE" > $LOG
else
    printf "\nChecking %s in BibTeX mode ...\n" "$BIBFILE"
    printf "Result of checking %s in BibTeX mode\n" "$BIBFILE" > $LOG
fi

printf "===> Looking for non-ASCII characters ...\n"
grep --color='auto' -P -n "[^\x00-\x7F]" "$BIBFILE" | sed "s|^|WARN - |" | grep --color='auto' -P -v '[\p{Han}]'
{
    printf "===> Non-ASCII characters:\n"
    grep -P -n "[^\x00-\x7F]" "$BIBFILE" | sed "s|^|WARN - |" | grep -P -v '[\p{Han}]'
} >> "$LOG"

printf "\n===> Checking the capital letters that need to be protected by curly braces ...\n"
{
    printf "\n--------------------------------------------------\n"
    printf "===> Capital letters that need to be protected by curly braces:\n"
} >> "$LOG"

CAPITAL_WORDS="Yuan Powell \
    COBYLA UOBYQA NEWUOA BOBYQA LINCOA PDFO \
    KKT Karush Kuhn Tucker \
    Armijo BFGS Banach Bernoulli Bregman Broyden Cauchy DFP DFO Euclid Euclidean Euler \
    Eulerian Fenchel Fortran GNU Gauss Gaussian Hermit Hermitian  Hessian Hilbert Hilbertian \
    Jacobi Jacobian Kronecker Lagrange Lagrangian Laplace Laplacian Lebesgue Levenberg Lipschitz \
    Lipschitzian MATLAB Matlab Marquardt Moore Newton Newtonian ODE PDE Plateau Python RAS \
    Riemann Riemannian Rockafellar SGD Schwarz Seidel Givens Householder Frobenius Schmidt \
    Einstein Fenchel Moreau Young Minkowski Stiefel Grassmann Grassmannian Neumann Fischer Halmos \
    Turing Knuth Dirichlet Poisson DtN Steklov Courant Hausdorff Hoffman Taylor Nesterov Polyak \
    Lasso LASSO ADMM APG FISTA CPU FPU GPU Hadamard Weierstrass Liouville Abel Abelian Galois \
    Hamilton Hamiltonian Atiyah Fourier Gronwall Bellman LaSalle Bihari Monte Carlo Sobolev \
    Ky Fan \
    Gram Schmidt \
    Poincare Poincar.*\\\\'e.* Poincar.*\\\\'{e}.* \
    Frechet Fr.*\\\\'e.*chet Fr.*\\\\'{e}.*chet \
    Fejer Fej.*\\\\'e.*r Fej.*\\\\'{e}.*r Fejerian Fej.*\\\\'e.*rian Fej.*\\\\'{e}.*rian \
    Holder H.*\\\\\"o.*lder H.*\\\\\"{o}.*lder Holderian H.*\\\\\"o.*lderian H.*\\\\\"{o}.*lderian \
    KL K-L Kurdyka Lojasiewicz \\\\L.*ojasiewicz {\\\\L.*}.*ojasiewicz"
for WORD in $CAPITAL_WORDS ; do
    grep -n "title\s*=" "$BIBFILE" | sed "s|^|WARN - |" | grep -v "{.*{.*$WORD.*}.*}" | grep -v "=\s*{$WORD" | grep --color='auto' "$WORD"
    grep -n "title\s*=" "$BIBFILE" | sed "s|^|WARN - |" | grep -v "{.*{.*$WORD.*}.*}" | grep -v "=\s*{$WORD" | grep --color='auto' "$WORD" >> "$LOG"
done

printf "\n===> Running %s %s ...\n" "$BCPY" "$BIBFILE"
# Writing "$BCPY" in the next line will not work.
$BCPY "$BIBFILE" | grep  "flawed name\|missing field\|wrong type\|non-unique id" \
    | sed "s|^<div id=|WARN - |" | sed "s|</li></ul><form class='bibTag_control'>.*$||" \
    | sed "s|class='bibTag .*<ul class='enumprob'><li>|, |" | sed "s|</li><li>|, |" \
    > $BCPYLOG 2>&1
cat $BCPYLOG
{
    printf "\n--------------------------------------------------\n===> Message from %s:\n" "$BCPY"
    cat $BCPYLOG
} >> "$LOG"
rm $BCPYLOG
rm $BCPYOUTPUT

printf "\n===> Running biber --tool -V %s ...\n" "$BIBFILE"
# Ignore warnings on `year = {2002 (to appear)}`
biber --tool -V "$BIBFILE" \
    | grep -v "legacy year field .* is not an integer - this will probably not sort properly" \
    | grep -v "Invalid value of field 'year' must be datatype 'datepart' - ignoring field" \
    | grep -v "INFO" | grep -v "_publisher" | grep -v "_number" | sed 's/skipping.*$//' > "$BIBERLOG" 2>&1
rm "$BIBFILE.blg"
BIBDIR="$(dirname "${BIBFILE}")"
BIBNAME="$(basename -- "$BIBFILE" | awk -F"." '{print $1}')"
rm -f "$BIBDIR"/"$BIBNAME"_bibertool.bib  # This file will not be generated if $BIBFILE contains errors.
# biber 2.16 (as of 2021-04-03) produces ~/_bibertool.bib if it is invoked by
# "biber --tool -V FILE_WITH_FULL_PATH" and there exists a dot (.) in the full path of the directory
# containing the file.
rm -f ~/_bibertool.bib
cat $BIBERLOG
{
    printf "\n--------------------------------------------------\n===> Message from biber:\n"
    cat $BIBERLOG
} >> "$LOG"
rm $BIBERLOG

printf "\nDone. Log written in %s.\n" "$LOG"

exit 0
