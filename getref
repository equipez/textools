#!/bin/bash
# Usage: getref BIB_ENTRY_ID|REFERENCE_TITLE [-b|--bib BIB_FILE_NAME or BIB_ENTRY_ID] [-f|--from REFERENCE_FILE] [-l|--livre]
# getref tries downloading a reference according to the given bib entry id or title and name it as
# $BIB_ENTRY_ID-$REFERENCE_TITLE or $REFERENCE_TITLE according to the availability of $BIB_ENTRY_ID.
# According to $BIB_FILE_NAME, we decide $REFERENCE_TITLE by $BIB_ENTRY_ID or vice versa.

BIBENTRYID=""
REFTITLE=""
BIBFILE=""
INPUTREF=""
BIBTYPE=""
SUCCESS=1

# Directory to save the references
REFDIR="$HOME/Bureau/bibliographie/literature/"
if ! [[ -d "$REFDIR" ]]; then
    REFDIR="$PWD"
fi
# Command to read the reference
READER="evince"

# Libgen
LIBGEN="http://libgen.rs/search.php?req="
# Libgen for articles
LIBGENART="http://libgen.rs/scimag/?q="
# Temporary html file
TMPHTML="$(date +%s)getref.html"


# Parse the arguments
if [[ $# -gt 5 ]]; then
    printf "Usage: getref BIB_ENTRY_ID|REFERENCE_TITLE [-b|--bib BIB_FILE_NAME] [-f|--from REFERENCE_FILE] [-l|--livre]\n"
    exit -1
fi

while [[ -n "$1" ]]; do
	case "$1" in
    -b|--bib)
        if [[ $# -gt 1 ]]; then
            BIBFILE="$2"
            shift
        fi
        ;;
    -f|--from)
        if [[ $# -gt 1 ]]; then
            INPUTREF="$2"
            shift
        fi
        ;;
    -l|--livre)
        BIBTYPE="book"
        shift
        ;;
	*)
        BIBENTRYID=$1
        ;;
	esac
	shift
done


if ! [[ -z "$BIBFILE" ]] && ! echo "$BIBFILE" | grep -q '\.bib$' ; then
    # If $BIBFILE is nonempty but it does not have the .bib extension, then it should be BIBENTRYID.
    REFTITLE=$BIBENTRYID
    BIBENTRYID=$BIBFILE
    BIBFILE=""
elif echo "$BIBENTRYID" | grep -q '[^a-zA-Z0-9_]' || ! echo "$BIBENTRYID" | grep -q '[a-z]' \
    || ! echo "$BIBENTRYID" | grep -q '[A-Z]' || ! echo "$BIBENTRYID" | grep -q '[0-9]'; then
    # If BIBENTRYID satisfies the above criteria, then it is indeed $REFTITLE.
    REFTITLE="$BIBENTRYID"
    BIBENTRYID=""
fi

if ! [[ -z $REFTITLE ]]; then
    REFTITLE=$(cleantitle $REFTITLE)
    UNDERSCORED_REFTITLE=$(echo "$REFTITLE" | sed -r 's/[^a-zA-Z0-9]+/_/g' | sed 's/_$//')
fi

# Decide the bib files to check
if ! [[ -z $BIBFILE ]]; then
    BIBFILES="$BIBFILE"
else
    BIBFILES=$(ls -t *.bib 2>/dev/null)
    if [[ -z $BIBFILES ]]; then
        printf "\nNo bib file found.\n\n"
    fi
fi


# Decide $REFTITLE by $BIBENTRYID or vice versa.
LINEBREAKER="LINEBREAKERSTARTING$(date +%s)LINEBREAKERENDING"
if ! [[ -z "$BIBENTRYID" ]]; then
    REFTITLE_IN_BIBFILE=""
    for FILE in $BIBFILES; do
        REFTITLE_IN_BIBFILE=$(sed '/^\s*%/d' $FILE \
            | sed 's/%.*$//' \
            | awk -v ORS="$LINEBREAKER" 1 \
            | sed "s/$LINEBREAKER\s*@/$LINEBREAKER\n@/g" \
            | grep "^@.*{\s*$BIBENTRYID\s*," | head -1 \
            | sed  "s/^.*$LINEBREAKER\s*title\s*=\s*{//" \
            | sed -r "s/},\s*$LINEBREAKER.*}\s*[$LINEBREAKER]+\s*$//" \
            | sed 's/\$//g' \
            | sed 's/\\//g' \
            | sed 's/{//g' \
            | sed 's/}//g' \
            | sed 's/^\s*//' \
            | sed 's/\s*$//' \
        )
        if ! [[ -z "$REFTITLE_IN_BIBFILE" ]] && [[ -z "$BIBTYPE" ]]; then
            BIBTYPE=$(sed '/^\s*%/d' $FILE \
                | sed 's/%.*$//' \
                | awk -v ORS="$LINEBREAKER" 1 \
                | sed "s/$LINEBREAKER\s*@/$LINEBREAKER\n@/g" \
                | grep "$BIBENTRYID" \
                | sed "s/^.*@//" \
                | sed "s/{.*$//" \
                | sed 's/^\s*//' \
                | sed 's/\s*$//' \
            )
            break
        fi
    done
    if [[ -z "$REFTITLE_IN_BIBFILE" ]] && ! [[ -z "$BIBFILES" ]]; then
        printf "\nThe bib entry id does not exist in the bib files(s).\n\n"
    else
        REFTITLE_IN_BIBFILE=$(cleantitle $REFTITLE_IN_BIBFILE)
        UNDERSCORED_REFTITLE_IN_BIBFILE=$(echo "$REFTITLE_IN_BIBFILE" | sed -r 's/[^a-zA-Z0-9]+/_/g' | sed 's/_$//')
    fi
    if ! [[ -z "$REFTITLE_IN_BIBFILE" ]] && ! [[ -z "$REFTITLE" ]]; then
        if [[$(echo "$UNDERSCORED_REFTITLE_IN_BIBFILE" | tr '[:upper:]' '[:lower:]') != $(echo "$UNDERSCORED_REFTITLE" | tr '[:upper:]' '[:lower:]')]]; then
            read -n1 -s -r -p \
                $"\nThe reference title and bib entry id contrdicts each other:\
                \nIn $FILE, the title of $BIBENTRYID is:\
                \n$REFTITLE_IN_BIBFILE\
                \nContinue to get the reference? [Y/n]\
                \nIf yes, the title in the bib file will be used.
                " KEY
            if [[ "$KEY" == "Y" || "$KEY" == "y" || "$KEY" == "" ]]; then
                REFTITLE=$REFTITLE_IN_BIBFILE
                UNDERSCORED_REFTITLE=$UNDERSCORED_REFTITLE_IN_BIBFILE
            else
                exit 1
            fi
        else
            REFTITLE=$REFTITLE_IN_BIBFILE
            UNDERSCORED_REFTITLE=$UNDERSCORED_REFTITLE_IN_BIBFILE
        fi
    elif ! [[ -z "$REFTITLE_IN_BIBFILE" ]] && [[ -z "$REFTITLE" ]]; then
        REFTITLE=$REFTITLE_IN_BIBFILE
        UNDERSCORED_REFTITLE=$UNDERSCORED_REFTITLE_IN_BIBFILE
    elif [[ -z "$REFTITLE_IN_BIBFILE" ]] && [[ -z "$REFTITLE" ]]; then
        echo "\nThe title of the reference cannot be decided.\n\n"
        exit -2
    fi
elif ! [[ -z "$REFTITLE" ]]; then
    for FILE in $BIBFILES; do
        BIBENTRYID=$(sed '/^\s*%/d' $FILE \
            | sed 's/%.*$//' \
            | awk -v ORS="$LINEBREAKER" 1 \
            | sed "s/$LINEBREAKER\s*@/$LINEBREAKER\n@/g" \
            | sed -r "s/^@article|^@book|^@booklet|^@.*report|^@.*thesis|^@incollection\
            |^@inproceedings|^@inbook|^@proceedings|^@misc|^@unpublished/@@/I" \
            | sed "s/{\s*/{/g" \
            | sed "s/\s*}/}/g" \
            | sed "s/{//g" \
            | sed "s/}//g" \
            | sed "s/\s*=\s*/=/g" \
            | sed -r 's/[^a-zA-Z0-9@=]+/_/g' \
            | cleantitle
            | grep "_title=$UNDERSCORED_REFTITLE\_$LINEBREAKER\|_title=$UNDERSCORED_REFTITLE$LINEBREAKER" | head -1 \
            | sed "s/^.*@@\s*//" \
            | sed "s/_$LINEBREAKER.*$//" \
            | sed 's/^\s*//' \
            | sed 's/\s*$//' \
        )
        if ! [[ -z "$BIBENTRYID" ]] && [[ -z "$BIBTYPE" ]]; then
            BIBTYPE=$(sed '/^\s*%/d' $FILE \
                | sed 's/%.*$//' \
                | awk -v ORS="$LINEBREAKER" 1 \
                | sed "s/$LINEBREAKER\s*@/$LINEBREAKER\n@/g" \
                | grep "$BIBENTRYID" \
                | sed "s/^.*@//" \
                | sed "s/{.*$//" \
                | sed 's/^\s*//' \
                | sed 's/\s*$//' \
            )
            break
        fi
    done
    if [[ -z "$BIBENTRYID" ]] && ! [[ -z "$BIBFILES" ]]; then
        printf "\nThe title does not exist in the bib files(s).\n"
    fi
else
    printf "\nNo bib entry id or reference title received.\n\n"
    exit -3
fi


if ! [[ -z "$BIBENTRYID" ]]; then
    EXISTINGREF=$(ls "$REFDIR""$BIBENTRYID"* 2>/dev/null | grep -i 'pdf\|djvu\|ps\|dvi' | head -1)
    if ! [[ -z "$EXISTINGREF" ]]; then
        printf "\nThe reference exists:\n"
        printf "$EXISTINGREF\n\n"
        $READER $EXISTINGREF
        exit 0
    fi
fi


if [[ -z "$BIBENTRYID" ]]; then
    REFFILE="$UNDERSCORED_REFTITLE"
    REFDIR="$PWD"
else
    REFFILE="$BIBENTRYID"-"$UNDERSCORED_REFTITLE"
fi


if ! [[ -z "$INPUTREF" ]]; then
    if  [[ -z "$BIBENTRYID" ]] || [[ -z "$REFTITLE" ]]; then
        printf "\nNo bib entry id received or the reference does not exist in the bib file(s).\n\n"
        exit -3
    fi
    INPUTREF=$(readlink -f $INPUTREF)
    FILETYPE="${INPUTREF##*.}"
    mv "$INPUTREF" "$REFDIR"/"$REFTITLE"."$FILETYPE"
    REFFILE="$REFDIR"/"$REFTITLE"."$FILETYPE"
    $READER $REFFILE
    exit 0
fi


BIBTYPE=$(echo "$BIBTYPE" | tr '[:upper:]' '[:lower:]')
if [[ $BIBTYPE == "book" ]] || [[ $BIBTYPE == "booklet" ]] || [[ $BIBTYPE == "proceedings" ]] \
    || [[ $BIBTYPE = "masterthesis" ]] || [[ $BIBTYPE = "phdthesis" ]]; then
    TMPURL="$LIBGEN$REFTITLE"
    echo "Checking $TMPURL ..."
    wget -q "$TMPURL" -O $TMPHTML
    TMPURL=$(cat $TMPHTML | grep " title='Gen.lib.rus.ec'" | head -1 \
        | sed "s/ title='Gen.lib.rus.ec'.*$//" | sed "s/^.*href=//" | sed 's/"//g' | sed "s/'//g")
    if [[ -z "$TMPURL" ]]; then
        SUCCESS=0
    else
        echo "Checking $TMPURL ..."
        wget -q "$TMPURL" -O $TMPHTML
        TMPURL=$(cat $TMPHTML | grep ">GET<" | head -1 \
            | sed "s/>GET<.*$//" | sed "s/^.*href=//" | sed 's/"//g' | sed "s/'//g")
        if [[ -z "$TMPURL" ]]; then
            SUCCESS=0
        else
            echo "Checking $TMPURL ..."
            wget "$TMPURL" -O $REFFILE
        fi
    fi
else
    TMPURL="$LIBGENART$REFTITLE"
    echo "Checking $TMPURL ..."
    wget -q "$TMPURL" -O $TMPHTML
    TMPURL=$(cat $TMPHTML | grep ">Sci-Hub<" | head -1 \
        | sed 's/>Sci-Hub<.*$//' | sed 's/^.*href=//' | sed 's/"//g' | sed "s/'//g")
    if [[ -z "$TMPURL" ]]; then
        SUCCESS=0
    else
        echo "Checking $TMPURL ..."
        wget -q "$TMPURL" -O $TMPHTML
        TMPURL=$(cat $TMPHTML | grep "save<" | head -1 \
            | sed "s/^.*href=//" | sed "s/\".*$//" | sed 's/"//g' | sed "s/'//g")
        if [[ -z "$TMPURL" ]]; then
            SUCCESS=0
        else
            echo "Checking $TMPURL ..."
            wget "$TMPURL" -O $REFFILE
        fi
    fi
fi

rm $TMPHTML

if [[ $SUCCESS -eq 0 ]]; then
    printf "Failed to get \n\n      $REFTITLE\n\nDownload it manually and name it to\n\n"
    printf "      $REFFILE\n\n"
    exit -4
fi

FILETYPE=$(file $REFFILE | tr '[:upper:]' '[:lower:]')

if echo "$FILETYPE" | grep -q "pdf"; then
    FILETYPE="pdf"
elif echo "$FILETYPE" | grep -q "djvu"; then
    FILETYPE="djvu"
elif echo "$FILETYPE" | grep -q "postscript"; then
    FILETYPE="ps"
elif echo "$FILETYPE" | grep -q "dvi"; then
    FILETYPE="dvi"
elif echo "$FILETYPE" | grep -q "empty"; then
    printf "Failed to get \n\n      $REFTITLE\n\nDownload it manually and name it to\n\n"
    printf "      $REFFILE\n\n"
    exit -4
else
    printf "\nUnkown file type:\n"
    printf "$(file $REFFILE)\n\n"
    FILETYPE="unknown"
fi

if [[ $FILETYPE == "unknown" ]]; then
    printf "The reference has an unknown file type. Check it manually and then rename\n\n"
    printf "$REFFILE\n\n"
else
    mv $REFFILE "$REFDIR"/"$REFFILE"."$FILETYPE"
    REFFILE="$REFDIR"/"$REFFILE"."$FILETYPE"
fi

$READER $REFFILE

exit 0


cleantitle () {
    if [[ $# -eq 1 ]]; then
        printf "\n Error: $0 needs one argument.\n"
        exit -1
    fi
    echo "$1" | sed 's/{//g' | sed 's/}//g' | sed 's/(//g' | sed 's/)//g' \
        | sed "s/\'//" | sed 's/"//g' | sed 's/`//g' | sed 's/^//g' | sed 's/~//g' \
        | sed 's/\\\\L/L/g' | sed 's/\\\\l/l/g' | sed 's/\\//g' | sed 's/^\s*//' | sed 's/\s*$//'
}
