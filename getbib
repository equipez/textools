#!/bin/bash
# Usage: getbib [AUXFILE_NAME] [-o|--output OUTPUTFILE_NAME]
# getbib exports a bib file containing only the cited terms according to the current aux
# file. $BAKDIR contains recent backups.

AUXFILE=""
OUTPUTFILE=""

# Log files
GETBIBLOG="getbib.log"
CHECKBIBLOG=checkbib.log

# Directory to contain the backups.
BAKDIR=./backup/


if [[ $# -gt 3 ]]; then
    printf "Usage: getbib [AUXFILE_NAME] [-o|--output OUTPUTFILE_NAME]\n"
    exit -1
fi

# Parse the arguments
while [[ -n "$1" ]]; do
	case "$1" in
    -o|--output)
        if [[ $# -gt 1 ]]; then
            OUTPUTFILE="$2"
            shift
        fi
        ;;
	*)
        if [[ -z "$AUXFILE" ]]; then
            AUXFILE="$1"
        fi
        ;;
	esac
	shift
done

# Get the name of the aux file with full path.
# If the input is empty, then use the latest aux file under the current directory.
if [[ $# -eq 0 ]] ||  [[ -z "$1" ]]; then
    AUXFILE=`find ./ -maxdepth 1 -type f -name "*.aux" -print0 | xargs -r -0 ls -1 -t | head -1`
fi
AUXFILE=`readlink -f $AUXFILE`
AUXNAME=${AUXFILE##*/}
AUXNAME=${AUXNAME%.*}
if [[ -z "$AUXNAME" ]]; then
    echo ""
    echo "No aux file found in the current directory."
    echo ""
    exit -2
elif [[ ! -f "AUXFILE" ]]; then
    echo ""
    echo "$AUXFILE does not exist."
    echo ""
    exit -2
fi

# Name of the bib file.
BIBFILE=$AUXNAME.bib

# Make a backup of the current bib file in the current directory.
TIME=`date +%Y.%m.%d-%H.%M.%S`
FULLBIBNAME=`realpath $BIBFILE`
FULLBIBNAME=${FULLBIBNAME//\//%}
BAKBIBFILE=$FULLBIBNAME-$TIME
if [[ -f "$BIBFILE" ]]; then
    cp $BIBFILE $BAKBIBFILE
else
    touch $BAKBIBFILE
fi

# Export the cited entries.
echo ""
echo "Exporting bib entries ..."
BIBENTRIES="bibentries"
MACROS="macros"
rm -f $BIBENTRIES $MACROS
touch $BIBENTRIES
touch $MACROS

# Name of the aux file.
AUXFILE=$AUXNAME.aux

BIBDATAFILES=`grep bibdata $AUXFILE | sed 's/.*\\\\bibdata{//' | sed 's/}.*$//' | sort -u`
CITEDBIBS=`grep bibcite $AUXFILE | sed 's/.*\\\\bibcite{//' | sed 's/}.*$//' | sort -u`

for FILE in $BIBDATAFILES
do
    for BIB in $CITEDBIBS
    do
        BIBENTRY=`sed -n "/.*{$BIB/,/^\s*}/{p;/^\s*}/q}" $FILE`
        echo "" >> $BIBENTRIES
        echo "$BIBENTRY" >> $BIBENTRIES
        MACRO=`echo "$BIBENTRY" | grep "journal\s*=\|journaltitle\s*=\|series\s*=" \
            | sed 's/.*journal\s*=\s*//' \
            | sed 's/.*journaltitle\s*=\s*//' \
            | sed 's/.*series\s*=\s*//' \
            | sed s/,.*$// | sed 's/{.*}//'`
        if ! [[ -z $MACRO ]]; then
            echo "" >> $MACROS
            grep "@string{\s*$MACRO" $FILE | sed 's/.*@string/@string/' >> $MACROS
        fi
    done
done

printf "%% bib file for $AUXNAME.tex generated at "$TIME".\n" > $BIBFILE
printf "%%\n" >> $BIBFILE
printf "%% The recommended format of the bib entry label is:\n" >> $BIBFILE
printf "%%\n" >> $BIBFILE
printf "%%     <AuthorLastnames_YearLetter>\n" >> $BIBFILE
printf "%%\n" >> $BIBFILE
printf "%%  For example, the key for an article by Yuan may be:\n" >> $BIBFILE
printf "%%\n" >> $BIBFILE
printf "%%     Yuan_2000a\n%%\n" >> $BIBFILE
printf "%% It is advised to use the abbreviations of names of serials in Math. Rev.\n" >> $BIBFILE
printf "%% See https://mathscinet.ams.org/msnhtml/serials.pdf .\n" >> $BIBFILE
printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n" >> $BIBFILE

grep -q -v '^\s*$' $MACROS  > /dev/null  # Check whether $MACROS is empty.
if [[ $? -eq 0 ]] ; then
    printf "%% String macros for abbreviations of names of serials.\n" >> $BIBFILE
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_BEGIN%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" >> $BIBFILE

    cat $MACROS | sed -r '/^\s*$/d' | sort -u >> $BIBFILE
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n" >> $BIBFILE
fi
rm $MACROS

if ! grep -q '[^[:space:]]' $BIBENTRIES ; then
    echo ""
    echo "$AUXFILE is not a valid aux file or contains no citation. Abort."
    echo ""
    rm $BIBENTRIES $BAKBIBFILE
    exit -3
fi
cat $BIBENTRIES >> $BIBFILE
rm $BIBENTRIES

# Move $BAKBIBFILE to $BAKDIR if it is different from the current one. Otherwise, remove it.
echo "" > $GETBIBLOG
echo "******** Difference between the new bib and the original one ********" >> $GETBIBLOG
echo "" >> $GETBIBLOG
# Remove the comments before comparing.
diff <(grep -v "^\s*%" $BIBFILE) <(grep -v "^\s*%" $BAKBIBFILE) >> $GETBIBLOG
if [[ $? -eq 1 ]]; then
    # $BAKDIR/$FULLBIBNAME-lastes_backup is always the latest backup.
    cp $BAKBIBFILE $BAKDIR/$FULLBIBNAME-latest_backup
    mkdir -p $BAKDIR
    mv $BAKBIBFILE $BAKDIR
    # Keep at most 50 latest files under $BAKDIR.
    (cd $BAKDIR && ls -tp | grep -v '/$' | grep $FULLBIBNAME | tail -n +51 | xargs -I {} rm -- {})
else
    rm $BAKBIBFILE
fi

checkbib $BIBFILE

echo "*************************** checkbib.log ****************************" | cat - $CHECKBIBLOG > tmp && mv tmp $CHECKBIBLOG
cat $GETBIBLOG  >> $CHECKBIBLOG
mv $CHECKBIBLOG $GETBIBLOG

echo "Done. See $GETBIBLOG for $CHECKBIBLOG and the difference between the new bib and the original one."
echo ""
echo "If the original bib file is different from the new one, its backup can be found at"
echo "$BAKDIR/$BAKBIBFILE"
echo ""

echo "" >> $GETBIBLOG
echo "If the original bib file is different from the new one, its backup can be found at" >> $GETBIBLOG
echo "$BAKDIR/$BAKBIBFILE" >> $GETBIBLOG

exit 0
