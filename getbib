#!/bin/bash
# Usage: getbib [AUXFILE_NAME] [-o|--output OUTPUTFILE_NAME]
# getbib exports a bib file containing only the cited terms according to the current aux
# file. $BAKDIR contains recent backups.

AUXFILE=""
OUTPUTFILE=""

# Log files
GETBIBLOG="getbib.log"
CHECKBIBLOG=checkbib.log

# Directory to contain the backups.
BAKDIR=./backup/


if [[ $# -gt 3 ]]; then
    printf "Usage: getbib [AUXFILE_NAME] [-o|--output OUTPUTFILE_NAME]\n"
    exit -1
fi

# Parse the arguments
while [[ -n "$1" ]]; do
	case "$1" in
    -o|--output)
        if [[ $# -gt 1 ]]; then
            OUTPUTFILE="$2"
            shift
        fi
        ;;
	*)
        if [[ -z "$AUXFILE" ]]; then
            AUXFILE="$1"
        fi
        ;;
	esac
	shift
done

# Get the name of the aux file with full path.
# If the input is empty, then use the latest aux file under the current directory.
if [[ $# -eq 0 ]] ||  [[ -z "$1" ]]; then
    AUXFILE=`find ./ -maxdepth 1 -type f -name "*.aux" -print0 | xargs -r -0 ls -1 -t | head -1`
fi
AUXFILE=`readlink -f $AUXFILE`
AUXNAME=${AUXFILE##*/}
# AUXNAME is the name of the aux file without path or extension.
AUXNAME=${AUXNAME%.*}
if [[ -z "$AUXNAME" ]]; then
    echo ""
    echo "No aux file found in the current directory."
    echo ""
    exit -2
elif [[ ! -f "$AUXFILE" ]]; then
    echo ""
    echo "$AUXFILE does not exist."
    echo ""
    exit -2
fi

# If no output file is specified, set OUTPUTFILE to $AUXNAME.bib.
if [[ -z "$OUTPUTFILE" ]]; then
    OUTPUTFILE="$AUXNAME".bib
fi
# Get the full path of $OUTPUTFILE. Note that we do not resolve the link if $OUTPUTFILE exists
# and is a symlink.
OUTPUTFILE="$(cd "$(dirname "$OUTPUTFILE")" && pwd)/$(basename "$OUTPUTFILE")"


# Temporary files.
# We work on OUTPUTBIB and copy it to OUTPUTFILE in the very end. This is necessary, because
# OUTPUTFILE may be identical to $AUXNAME.bib; we do not want to destroy $AUXNAME.bib until the very
# end, because the script may be interrupted in the middle.
TIME=`date +%Y.%m.%d-%H.%M.%S`
OUTPUTBIB="outputbib-$TIME.bib"
BIBMACROS="bibmacros-$TIME"
BIBENTRIES="bibentries-$TIME"


# Export the cited entries.
echo ""
echo "Exporting bib entries ..."
rm -f $BIBENTRIES $BIBMACROS
touch $BIBENTRIES $BIBMACROS

BIBDATAFILES=`grep bibdata $AUXFILE | sed 's/.*\\\\bibdata{//' | sed 's/}.*$//' | sort -u`
CITEDBIBS=`grep bibcite $AUXFILE | sed 's/.*\\\\bibcite{//' | sed 's/}.*$//' | sort -u`

for FILE in $BIBDATAFILES
do
    for BIB in $CITEDBIBS
    do
        BIBENTRY=`sed -n "/.*{$BIB/,/^\s*}/{p;/^\s*}/q}" $FILE`
        echo "" >> $BIBENTRIES
        echo "$BIBENTRY" >> $BIBENTRIES
        BIBMACRO=`echo "$BIBENTRY" | grep "journal\s*=\|journaltitle\s*=\|series\s*=" \
            | sed 's/.*journal\s*=\s*//' \
            | sed 's/.*journaltitle\s*=\s*//' \
            | sed 's/.*series\s*=\s*//' \
            | sed s/,.*$// | sed 's/{.*}//'`
        if ! [[ -z $BIBMACRO ]]; then
            echo "" >> $BIBMACROS
            grep "@string{\s*$BIBMACRO" $FILE | sed 's/.*@string/@string/' >> $BIBMACROS
        fi
    done
done

if ! grep -q '[^[:space:]]' $BIBENTRIES ; then
    echo ""
    echo "$AUXFILE is not an aux file containing citations or it refers to invalid bib files. Abort."
    echo ""
    rm $BIBENTRIES $BIBMACROS
    exit -3
fi

printf "%% bib file generated according to $AUXNAME.aux at "$TIME".\n" > $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%% The recommended format of the bib entry label is:\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%     <AuthorLastnames_YearLetter>\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%  For example, the key for an article by Yuan may be:\n" >> $OUTPUTBIB
printf "%%\n" >> $OUTPUTBIB
printf "%%     Yuan_2000a\n%%\n" >> $OUTPUTBIB
printf "%% It is advised to use the abbreviations of names of serials in Math. Rev.\n" >> $OUTPUTBIB
printf "%% See https://mathscinet.ams.org/msnhtml/serials.pdf .\n" >> $OUTPUTBIB
printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n" >> $OUTPUTBIB

if grep -q '[^[:space:]]' $BIBMACROS ; then
    printf "%% String macros for abbreviations of names of serials.\n" >> $OUTPUTBIB
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_BEGIN%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" >> $OUTPUTBIB

    cat $BIBMACROS | sed -r '/^\s*$/d' | sort -u >> $OUTPUTBIB
    printf "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MACRO_END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n" >> $OUTPUTBIB
fi
rm $BIBMACROS

cat $BIBENTRIES >> $OUTPUTBIB
rm $BIBENTRIES


# Make a backup of $OUTPUTFILE under $BAKDIR if $OUTPUTFILE exists.
FULLBIBNAME=${OUTPUTFILE//\//%}
BAKBIBFILE=$FULLBIBNAME-$TIME
BIBDIFFERENT=0
echo "" > $GETBIBLOG
if [[ -f "$OUTPUTFILE" ]]; then
    echo "******** Difference between the new bib and the original one ********" >> $GETBIBLOG
    echo "" >> $GETBIBLOG
    # Remove the comments before comparing.
    diff <(grep -v "^\s*%" $OUTPUTBIB) <(grep -v "^\s*%" $OUTPUTFILE) >> $GETBIBLOG
    if [[ $? -eq 1 ]]; then
        BIBDIFFERENT=1
        # $BAKDIR/$FULLBIBNAME-lastes_backup is always the latest backup.
        mkdir -p $BAKDIR
        cp $OUTPUTFILE $BAKDIR/$FULLBIBNAME-latest_backup
    	mv $OUTPUTFILE $BAKDIR/$BAKBIBFILE
        # Keep at most 50 latest files under $BAKDIR.
        (cd $BAKDIR && ls -tp | grep -v '/$' | grep $FULLBIBNAME | tail -n +51 | xargs -I {} rm -- {})
    fi
fi

# Write the output to $OUTPUTFILE
mv $OUTPUTBIB $OUTPUTFILE


# Check $OUTPUTFILE.
# First, decide whether this is a BibLaTeX file or a BibTeX file.
if grep -q "journaltitle\s*=\s*\|date\s*=\s*\|location\s*=\s*\|type\s*=\s*" $OUTPUTFILE ; then
    # This is likely a BibLaTeX file.
    checkbib -l $OUTPUTFILE
else
    # This is likely a BibTeX file.
    checkbib $OUTPUTFILE
fi

echo "*************************** checkbib.log ****************************" | cat - $CHECKBIBLOG > tmp && mv tmp $CHECKBIBLOG
cat $GETBIBLOG  >> $CHECKBIBLOG
mv $CHECKBIBLOG $GETBIBLOG

echo "Done. See $GETBIBLOG for $CHECKBIBLOG and the difference between the new bib and the original one."

if [[ $BIBDIFFERENT -eq 1 ]]; then
    echo ""
    echo "A copy of the original bib file is saved at"
    echo "$BAKDIR/$BAKBIBFILE"

    echo "" >> $GETBIBLOG
    echo "A copy of the original bib file is saved at" >> $GETBIBLOG
    echo "$BAKDIR/$BAKBIBFILE" >> $GETBIBLOG
fi

echo ""

exit 0
